# doodle project and  laba 1 laba 2 laba3
Гра дудл 
ДОКУМЕНТАЦІЯ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


Для більш детального розуміння коду я намагався коментувати код в проекті та  ставити відповіні назви функцій!!!!!!!!!!!!!!!!!!!!!!

За допомогою цього коду підлючати у фреймфорк qt бібліотеку sfml 

 

LIBS += -L"..\SFML-2.6.0\lib" 

LIBS += -L"..\SFML-2.6.0\bin" 

  

CONFIG(release, debug|release): LIBS += -lsfml-audio -lsfml-graphics -lsfml-network -lsfml-system -lsfml-window 

CONFIG(debug  , debug|release): LIBS += -lsfml-audio -lsfml-graphics -lsfml-network -lsfml-system -lsfml-window 

  

INCLUDEPATH += "..\SFML-2.6.0\include" 

  

DEPENDPATH += "..\SFML-2.6.0\include" 

 

Doodle.h: 

 

#include <SFML/Graphics.hpp>  -> для використання графіки sfml 

#include <SFML/Audio.hpp>  -> для використання музики 

#include <iostream>  -> загальна  бібліотека 

#include <vector> -> мій контейнер

#include <string> -> для зручності в проведенні тестів та написання тексту 

#include "QMessageBox" -> для виведення помилок у коді, або виведення даних(у мене виведення рахунку) 

#include <QString>  ->  для зручності в проведенні тестів та написання тексту(унікальна бібліотека qtcreator де є більше функцій, я перетворвав з числа в стрінг) 

 

class Game -> використання координат типу x y dx dy для того щоб взаємодіяти з об’єктами. Успадковую її 

 

class BasicMechanics -> механіка для мого Дудла який падає, пригає і тд. 

class Platform -> загальний клас для платформ, де міститься усі взаємодії з платформами. Успадковую її 

class WhitePlatform : virtual public Platform -> біла платформа з унікальними властивостями 

class MovingPlatform : virtual public Platform -> голуба платформа з унікальними властивостями 

class ExtremePlatform :  public WhitePlatform, public MovingPlatform -> жовта  з властивостями минулих платформ. Трійне успадкування 

class TextureManager ->  клас для  загрузки текстур та взаємодії з ними. 

class Level -> клас для взаємодії з рівнями 

class EasyLevel -> клас де обираються платформи для легкого рівня 

class MediumLevel -> клас де обираються платформи для середнього рівня 

class HardLevel -> клас де обираються платформи для складного рівня 

class Score -> клас для взаємодією з рахунком 

class traps : public Game -> клас для взаємодії з пастками 

void ResetGame -> функція для рестарту гри 

void RunGame -> функція яка викликає нашу гру 

 

Mainwindow.h 

 

#include <QMainWindow> -> для роботи з MainWindow 

#include <QRadioButton> -> для роботи з RadioButton 

 

class MainWindow -> загальний клас де міститься всі більшість даних та функцій 

 

    void startDoodleGame(); -> функція для старту гри 

    void starteasyGame(); -> функція для старту легкої гри 

    void startmediumGame(); -> функція для старту средньої гри 

    void starthardGame(); -> функція для старту складної гри 

 

Добавив змінні для загальної роботи з параметрами й підраховуванням найращого рахунку: 

    bool controller = true; 

    QString skinchange = "ninja"; 

    QString backgroundchange = "default"; 

    int thebestscore = 0; 

 

Settings.h 

 

#include <QDialog> для роботи з вікном  Dialog 

#include <QRadioButton> для роботи з RadioButton 

#include <QButtonGroup> для роботи з ButtonGroup 

 

class settings -> загальний клас для роботи з параметрами 

Геттери для роботи з параметрами  

    QRadioButton* getRadioButton() const; 

    QRadioButton* getRadioButton_2() const; 

    QRadioButton* getRadioButton3() const; 

    QRadioButton* getRadioButton4() const; 

    QRadioButton* getRadioButton5() const; 

    QRadioButton* getRadioButton6() const; 

    QRadioButton* getRadioButton7() const; 

    QRadioButton* getRadioButton8() const; 

 

Tutorial.h 

class tutorial клас для роботи з туторіалом (нічого цікавого) 




лаба 1   ------------------------------------------------------------------------------------------------------------------------------
https://github.com/ArturGoz/doodle.git тут я робив 1 лабу(а це загальний репозиторій де вся інформація)
1.маю 15 класів
2.маю 15 полів 
3.маю 30+ нетривіальних функцій 
4.  class traps : public Game і class WhitePlatform : virtual public Platform  ... 2 ієрархії успадкування ...
успадковую Game бо там є координати якими я можу контрольвати об'єкт та успадковую Platform бо там є загальні функції для платформи

class ExtremePlatform :  public WhitePlatform, public MovingPlatform наслідує 3 платформи (3-не успадкування ) так як WhitePlatform і MovingPlatform наслідують Platform

// 5.  WhitePlatform ::  movePlatforms(float dy, int& y,Sprite score[], int fs[], int& sc) -> статичний поліморфізм,
перезагрузка -> немає h як у Platform ::movePlatforms(float dy, int& y, int& h, Sprite score[], int fs[], int& sc),  
WhitePlatform :: TouchToPlatform(int x, int y, float& dy, int index) override та  MovingPlatform : createPlatform(int count) override динамічні полімофізми
 6. інкапсуляцію старався реалізувати правильно
 7. Контейнер маю у вигляді вектора  std::vector<Vector2f> plat;

Усі функції та поля  я не перераховував, можете самі побачити у коді що там їх багато.

ПРОЕКТ та лаба 2 ------------------------------------------------------------------------------------------------------------------------------
відео  https://youtu.be/RSNm2dQl2X8

використовую qt фреймворк

1. Маю 4 вікна. 1 вікно це моє меню ігри, де можу натиснути на кнопки "Налаштування" або "Наставлення" або "Складний/Середній/Легкий рівень гри". Відповідно натиснувши на ці кнопки ви перейдете на відповідні вікна.
   
2. маю 6 кнопок у меню та 5 текстових полів. маю 8 радіобатонів у налаштуваннях та 4 текстові поля. у наставленні маю 1 текстове поле. після кінця гри вискакує QMessageBox з рахунком.Отже маю 25 елементів керування
   
3. у вигляді контейнера маю scrollAreaWidget. Який міститься у 3 вікнах.

4. 22 обробників подій:
 маю 4 бінди клавіш щоб обробляти події у грі
tab -> призупинення гри/продовження гри
F1 -> включити музику/виключити музику
F2 -> рестарт гри
esc -> вийти з гри

<- and ->  /  A and D  4 кнопки якими можна керувати дудлом вліво або в право на клавіатурі. контролер можна обрати в параметрах

3 радіобатони в параметрах за допомогою яких можна змінити фон у грі.
2 радіобатони в параметрах за допомогою яких можна змінити контролер у грі.
3 радіобатони в параметрах за допомогою яких можна змінити скін дудла у грі.
6 кнопок у меню, які відповідно переносять користувача у відповідне вікно.

ЛАба 3 ------------------------------------------------------------------------------------------------------------------------------
 
Використовував бібліотеку sfml та фреймворк qt
1.	Які конкретні задачі планували вирішувати за допомогою цієї бібліотеки? Створення 2D гри з графічним інтерфейсом. 
2.	Чому було обрано саме цю бібліотеку, а не аналоги? Обравши SFML через його популярність, легкість використання та відмінну підтримку для C++. При плануванні створення моєї гри я зустрів багато схожих проектів, у яких використовували бібліотеку sfml, що дає деяку впевненість що можна десь навчитись кодити у цій бібліотеці. я вчився у ютубі та інколи переглядував код у гітхабах.  
3.	Наскільки просто та зрозуміло було отримати, встановити, налаштувати та почати використовувати цю бібліотеку? Зі встановленням у мене не було труднощів, а при налаштуванні були.у visual studio потрібно було змінити деякі параметри та додавати саму бібліотеку,даже інколи за допомогою гайдів у ютубі про налаштування сфмл, у мене все одно видавались деякі помилки при компеляції. зміг налаштувати за допомогою 3-4-го відео про налаштування сфмл. Але потім я перейшов до qt creator де налаштував бібліотеку легко без проблем.
4.	Наскільки зрозумілою та корисною була документація бібліотеки? Документація зазвичай досить добре написана та інформативна. Легко знаходити необхідну інформацію.
5.	Наскільки було зрозуміло, як саме використовувати бібліотеку, які класи/методи/функції використовувати для вирішення поставлених задач? Зазвичай досить зрозуміло. Багато ресурсів та прикладів для новачків у різних джерелах, як у ютубі, гітхабі , так і на самому сайті сфмл.
6.	Наскільки зручно було використовувати бібліотеку, чи не треба було писати багато надлишкового коду? Зазвичай зручно використовувати, але обсяг коду може залежати від завдань.
7.	Наскільки зрозумілою була поведінка класів/методів/функцій з бібліотеки? Як таких то проблем у мене не було у використанні класів/методів/функцій з бібліотеки. У мене досить невеликий проект тому я ще не до кінця використав всю бібліотеку сфмл, але у використаних класів/методів/функцій у бібліотеці сфмл поведінка була адекватною,проблем не мав.
8.	Наскільки зрозумілою була взаємодія між різними класами/методами/функціями цієї бібліотеки, а також взаємодія між бібліотекою та власним кодом?  Все було зрозуміло. Переклад класів/методів/функцій у бібліотеці по англійськи впринципі було зрозуміле тому я не путався у використанні цієї біблотеки.
9.	Чи виникали якісь проблеми з використанням бібліотеки? Чи вдалось їх вирішити, як саме? Було багато проблем. Використовував ютуб та чат GPT для подолання цих проблем. За допомогою 5 спроб сказати чату гпт який код треба зробити, він це робив ))
10.	Що хорошого можна сказати про цю бібліотеку, які були позитивні аспекти використання бібліотеки? Легкість використання, широкі можливості, активна спільнота, багато прикладів та ресурсів.
11.	Що поганого можна сказати про цю бібліотеку, які були негативні аспекти використання бібліотеки? Можливі труднощі при роботі налаштуванні.
12.	Якби довелось вирішувати аналогічну задачу, але вже враховуючи досвід використання в цій лабораторній роботі, що варто було б робити так само, а що змінити? Можливо, використати інші бібліотеки, чи використати інші можливості цієї бібліотеки, чи інакше організувати код, чи ще щось? Можливо б  створював все у qt бо поєднувати 2 графічних інтерфейса як для мене не є круто для початківців.

13.	мої текстури скинув у код. Моя музика Fluffing-a-Duck(chosic.com). sfml https://www.sfml-dev.org/download.php. qt https://www.qt.io/download

https://www.youtube.com/watch?v=7Vf_vQIUk5Q&t=5s&ab_channel=FamTrinli -> брав трохи  код з цього відео







